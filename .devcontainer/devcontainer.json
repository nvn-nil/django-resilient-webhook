// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.187.0/containers/python-3
{
  "name": "django-resilient-webhook",
  "build": {
    "dockerfile": "Dockerfile",
    "context": ".."
  },
  // Set *default* container specific settings.json values on container create.
  "customizations": {
    "vscode": {
      "settings": {
        "austin.mode": "Wall time",
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.formatOnSave": true,
        "jupyter.widgetScriptSources": ["jsdelivr.com", "unpkg.com"],
        "prettier.prettierPath": "/usr/local/prettier",
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",
        "python.formatting.blackPath": "/usr/local/py-utils/bin/black",
        "python.formatting.provider": "black",
        "python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",
        "python.languageServer": "Pylance",
        "python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
        "python.linting.enabled": true,
        "python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
        "python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
        "python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
        "python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
        // Line length to match black settings
        // Disabling specific messages:
        //  - To find the details do: /usr/local/py-utils/bin/pylint --list-msgs
        //  - Disable missing-module-docstring (C0114) because we don't document modules routinely, just their members
        //  - Disable invalid-name (C0103) because pylint thinks that eg 'x', 'df', 'np' are invalid due to their lengths
        "python.linting.pylintArgs": [
          "--max-line-length=120",
          "--disable=missing-module-docstring,invalid-name"
        ],
        "python.linting.pylintEnabled": true,
        "python.linting.pylintPath": "/usr/local/py-utils/bin/pylint",
        "python.pythonPath": "/usr/local/bin/python",
        "terminal.integrated.defaultProfile.linux": "zsh"
      },
      // Add the IDs of extensions you want installed when the container is created.
      "extensions": [
        "esbenp.prettier-vscode",
        "irongeek.vscode-env",
        "mikestead.dotenv",
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "ms-toolsai.jupyter-renderers",
        "ms-toolsai.jupyter-keymap",
        "ms-vsliveshare.vsliveshare",
        "p403n1x87.austin-vscode",
        "ritwickdey.liveserver",
        "HashiCorp.terraform"
      ]
    }
  },
  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  "forwardPorts": [],
  // Use 'postCreateCommand' to run commands after the container is created.
  "postCreateCommand": ". .devcontainer/postcreate.sh",
  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "vscode",
  // Allow ptrace based debuggers (like austin) to work in the container
  "runArgs": [
    "--env-file",
    "${localWorkspaceFolder}/.env",
    "--cap-add=SYS_PTRACE",
    "--security-opt",
    "seccomp=unconfined"
  ],
  // Mount any credentials from host home directory into the container
  // Create symlinks for any of the required credential files for use
  // in the workspace and avoid directly copying keys into the workspace
  "mounts": [
    "type=bind,source=${localEnv:HOME}/.config/gcloud,target=/gcloud-credentials,consistency=cached",
    "type=bind,source=${localEnv:HOME}/.config/terraform/nvn-nil,target=/home/vscode/.terraform.d,consistency=cached"
  ],
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2.3.2": {
      "installZsh": true,
      "configureZshAsDefaultShell": true,
      "installOhMyZsh": true,
      "upgradePackages": true,
      "username": "vscode",
      "userUid": "automatic",
      "userGid": "automatic"
    },
    "ghcr.io/devcontainers/features/git:1": {
      "ppa": true,
      "version": "os-provided"
    },
    "ghcr.io/devcontainers/features/git-lfs:1": {
      "version": "latest"
    },
    "ghcr.io/devcontainers/features/github-cli:1": {
      "installDirectlyFromGitHubRelease": true,
      "version": "latest"
    },
    "ghcr.io/devcontainers/features/node:1": {
      "nodeGypDependencies": false,
      "version": "latest"
    },
    "ghcr.io/devcontainers-contrib/features/terraform-asdf:2": {},
    "ghcr.io/devcontainers-contrib/features/terraformer:1": {},
    "ghcr.io/dhoeric/features/google-cloud-cli:1": {}
  }
}
